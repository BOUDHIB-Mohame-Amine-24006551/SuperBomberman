// FILE: src/main/java/fr/univ/bomberman/controller/GameModeController.java
package fr.univ.bomberman.controller;

import fr.univ.bomberman.BombermanApp;
import fr.univ.bomberman.model.PlayerProfile;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.FileChooser;
import java.io.File;

import java.util.Optional;

/**
 * Contr√¥leur pour le menu de s√©lection du mode de jeu
 */
public class GameModeController {

    @FXML private Button twoPlayerButton;
    @FXML private Button fourPlayerButton;
    @FXML private Button settingsButton;
    @FXML private Button themeButton;
    @FXML private Button playerNamesButton;
    @FXML private Button backButton;
    @FXML private Button quitButton;
    @FXML private Button selectProfileButton;
    @FXML private Button selectLevelButton;
    private PlayerProfile currentProfile;
    private static PlayerProfile currentGameProfile = null;

    private BombermanApp bombermanApp;
    private String player1Name = "Joueur 1";
    private String player2Name = "Joueur 2";

    @FXML private Label currentProfileLabel;

    /**
     * Initialisation du contr√¥leur
     */
    @FXML
    public void initialize() {
        System.out.println("GameModeController initialis√©");

        // Effets visuels sur les boutons principaux
        setupButtonEffects();
    }

    /**
     * Configure les effets visuels des boutons
     */
    private void setupButtonEffects() {
        // Effet hover sur le bouton 2 joueurs
        twoPlayerButton.setOnMouseEntered(e ->
                twoPlayerButton.setStyle(twoPlayerButton.getStyle() + "-fx-scale-x: 1.05; -fx-scale-y: 1.05;"));
        twoPlayerButton.setOnMouseExited(e ->
                twoPlayerButton.setStyle(twoPlayerButton.getStyle() + "-fx-scale-x: 1.0; -fx-scale-y: 1.0;"));

        // Effet hover sur le bouton 4 joueurs
        fourPlayerButton.setOnMouseEntered(e ->
                fourPlayerButton.setStyle(fourPlayerButton.getStyle() + "-fx-scale-x: 1.05; -fx-scale-y: 1.05;"));
        fourPlayerButton.setOnMouseExited(e ->
                fourPlayerButton.setStyle(fourPlayerButton.getStyle() + "-fx-scale-x: 1.0; -fx-scale-y: 1.0;"));
    }

    /**
     * D√©finit la r√©f√©rence vers l'application principale
     */
    public void setBombermanApp(BombermanApp app) {
        this.bombermanApp = app;
    }

    /**
     * Lance le mode 2 joueurs
     */
    @FXML
    private void onTwoPlayerMode(ActionEvent event) {
        try {
            System.out.println("Lancement du mode 2 joueurs");

            // Afficher une confirmation avec les noms actuels
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("Mode 2 Joueurs");
            confirmAlert.setHeaderText("üî• PR√äT POUR LE DUEL ? üî•");
            confirmAlert.setContentText("Joueurs:\n" +
                    "üîµ " + player1Name + " (ZQSD + ESPACE)\n" +
                    "üü¢ " + player2Name + " (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)\n\n" +
                    "Que le meilleur gagne !");

            Optional<ButtonType> result = confirmAlert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startCanvasGameWithNames(player1Name, player2Name);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer le mode 2 joueurs: " + e.getMessage());
        }
    }

    /**
     * Lance le mode 4 joueurs (Bataille Royale)
     */
    @FXML
    private void onFourPlayerMode(ActionEvent event) {
        try {
            System.out.println("Lancement du mode 4 joueurs - Bataille Royale");

            // Demander les noms des 4 joueurs
            String[] playerNames = get4PlayerNames();
            if (playerNames == null) return; // Annul√©

            // Confirmation avec aper√ßu
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("‚öîÔ∏è BATAILLE ROYALE 4 JOUEURS ‚öîÔ∏è");
            confirmAlert.setHeaderText("DERNI√àRE CHANCE AVANT LA GUERRE !");
            confirmAlert.setContentText("Combattants:\n" +
                    "üî¥ " + playerNames[0] + " (ZQSD + A)\n" +
                    "üîµ " + playerNames[1] + " (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)\n" +
                    "üü° " + playerNames[2] + " (IJKL + U)\n" +
                    "üü¢ " + playerNames[3] + " (8456 + 7)\n\n" +
                    "‚ö° Mode discret: 1 touche = 1 mouvement\n" +
                    "üíÄ Dernier survivant remporte tout !");

            Optional<ButtonType> result = confirmAlert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startFourPlayerGame(playerNames);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer la bataille royale: " + e.getMessage());
        }
    }

    /**
     * Ouvre les param√®tres
     */
    @FXML
    private void onSettings(ActionEvent event) {
        Alert infoAlert = new Alert(Alert.AlertType.INFORMATION);
        infoAlert.setTitle("‚öôÔ∏è Param√®tres");
        infoAlert.setHeaderText("Param√®tres du jeu");
        infoAlert.setContentText("üéÆ Contr√¥les en jeu:\n" +
                "‚Ä¢ T = Changer de th√®me\n" +
                "‚Ä¢ R = Red√©marrer la partie\n" +
                "‚Ä¢ ESC = Retour au menu\n" +
                "‚Ä¢ E = Forcer la fin de partie\n\n" +
                "üî• Les bombes tuent les adversaires !\n" +
                "üíõ Vous √™tes prot√©g√© de vos propres bombes");
        infoAlert.showAndWait();
    }

    /**
     * Gestion des th√®mes
     */
    @FXML
    private void onThemes(ActionEvent event) {
        Alert themeAlert = new Alert(Alert.AlertType.INFORMATION);
        themeAlert.setTitle("üé® Th√®mes visuels");
        themeAlert.setHeaderText("Changement de th√®me");
        themeAlert.setContentText("üé® Th√®mes disponibles:\n" +
                "‚Ä¢ Default - Th√®me classique\n" +
                "‚Ä¢ Pokemon - Personnages Pokemon\n\n" +
                "üí° Changez de th√®me en jeu avec la touche T\n" +
                "üñºÔ∏è Ajoutez vos propres images dans:\n" +
                "resources/fr/univ/bomberman/image/[theme]/");
        themeAlert.showAndWait();
    }

    /**
     * Modification des noms des joueurs
     */
    @FXML
    private void onPlayerNames(ActionEvent event) {
        try {
            // Joueur 1
            TextInputDialog dialog1 = new TextInputDialog(player1Name);
            dialog1.setTitle("Nom du Joueur 1");
            dialog1.setHeaderText("üîµ Joueur 1 (ZQSD + ESPACE)");
            dialog1.setContentText("Nom:");

            Optional<String> result1 = dialog1.showAndWait();
            if (result1.isPresent() && !result1.get().trim().isEmpty()) {
                String newName1 = result1.get().trim();

                if (newName1.length() > 15) {
                    showError("Nom trop long", "Maximum 15 caract√®res");
                    return;
                }

                // Joueur 2
                TextInputDialog dialog2 = new TextInputDialog(player2Name);
                dialog2.setTitle("Nom du Joueur 2");
                dialog2.setHeaderText("üü¢ Joueur 2 (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)");
                dialog2.setContentText("Nom:");

                Optional<String> result2 = dialog2.showAndWait();
                if (result2.isPresent() && !result2.get().trim().isEmpty()) {
                    String newName2 = result2.get().trim();

                    if (newName2.length() > 15) {
                        showError("Nom trop long", "Maximum 15 caract√®res");
                        return;
                    }

                    if (newName1.equals(newName2)) {
                        showError("Noms identiques", "Les joueurs doivent avoir des noms diff√©rents");
                        return;
                    }

                    // Sauvegarder
                    player1Name = newName1;
                    player2Name = newName2;

                    Alert successAlert = new Alert(Alert.AlertType.INFORMATION);
                    successAlert.setTitle("‚úÖ Noms mis √† jour");
                    successAlert.setContentText("üîµ " + player1Name + " vs üü¢ " + player2Name + "\n\nPr√™ts pour le combat !");
                    successAlert.showAndWait();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Probl√®me lors de la modification des noms");
        }
    }

    /**
     * Retour au menu principal
     */
    @FXML
    private void onBack(ActionEvent event) {
        try {
            if (bombermanApp != null) {
                bombermanApp.showMenu();
            } else {
                // Fallback: retour au menu principal
                FXMLLoader loader = new FXMLLoader();
                loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/main/menu.fxml"));
                Parent root = loader.load();

                Scene scene = new Scene(root);
                Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
                stage.setScene(scene);
                stage.show();
            }
        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de retourner au menu");
        }
    }

    /**
     * Quitter l'application
     */
    @FXML
    private void onQuit(ActionEvent event) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
        confirmAlert.setTitle("Quitter");
        confirmAlert.setHeaderText("üö™ Partir d√©j√† ?");
        confirmAlert.setContentText("√ätes-vous s√ªr de vouloir quitter Super Bomberman ?");

        Optional<ButtonType> result = confirmAlert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.close();
        }
    }

    /**
     * Demande les noms des 4 joueurs
     */
    private String[] get4PlayerNames() {
        String[] names = new String[4];
        String[] defaultNames = {"Rouge", "Bleu", "Jaune", "Vert"};
        String[] descriptions = {
                "üî¥ Joueur 1 (ZQSD + A)",
                "üîµ Joueur 2 (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)",
                "üü° Joueur 3 (IJKL + U)",
                "üü¢ Joueur 4 (8456 + 7)"
        };

        for (int i = 0; i < 4; i++) {
            TextInputDialog dialog = new TextInputDialog(defaultNames[i]);
            dialog.setTitle("Nom du Joueur " + (i + 1));
            dialog.setHeaderText(descriptions[i]);
            dialog.setContentText("Nom:");

            Optional<String> result = dialog.showAndWait();
            if (!result.isPresent()) {
                return null; // Annul√©
            }

            String name = result.get().trim();
            if (name.isEmpty()) {
                showError("Nom invalide", "Le nom ne peut pas √™tre vide");
                i--; // Recommencer
                continue;
            }

            if (name.length() > 15) {
                showError("Nom trop long", "Maximum 15 caract√®res");
                i--; // Recommencer
                continue;
            }

            names[i] = name;
        }

        // V√©rifier unicit√©
        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 4; j++) {
                if (names[i].equals(names[j])) {
                    showError("Noms identiques", "Tous les joueurs doivent avoir des noms diff√©rents");
                    return get4PlayerNames(); // Recommencer
                }
            }
        }

        return names;
    }

    /**
     * Affiche une erreur
     */
    private void showError(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void onBotMode(ActionEvent event) {
        try {
            System.out.println("Lancement du mode Bot");

            // Interface de s√©lection de difficult√© am√©lior√©e
            Alert botAlert = new Alert(Alert.AlertType.CONFIRMATION);
            botAlert.setTitle("ü§ñ D√âFI CONTRE L'IA");
            botAlert.setHeaderText("Choisissez votre adversaire artificiel !");

            StringBuilder content = new StringBuilder();
            content.append("üéØ Testez vos comp√©tences contre l'Intelligence Artificielle !\n\n");
            content.append("üéÆ Vous contr√¥lez avec ZQSD + ESPACE\n");
            content.append("ü§ñ L'IA joue automatiquement\n\n");
            content.append("Quelle difficult√© choisissez-vous ?");

            botAlert.setContentText(content.toString());

            ButtonType easyButton = new ButtonType("üòä Facile - IA D√©butante");
            ButtonType mediumButton = new ButtonType("üòê Moyen - IA √âquilibr√©e");
            ButtonType hardButton = new ButtonType("üòà Difficile - IA Redoutable");
            ButtonType cancelButton = new ButtonType("Annuler");

            botAlert.getButtonTypes().setAll(easyButton, mediumButton, hardButton, cancelButton);

            Optional<ButtonType> result = botAlert.showAndWait();
            if (!result.isPresent()) return;

            int difficulty = 2;
            String difficultyName = "Moyen";

            if (result.get() == easyButton) {
                difficulty = 1;
                difficultyName = "Facile";
            } else if (result.get() == mediumButton) {
                difficulty = 2;
                difficultyName = "Moyen";
            } else if (result.get() == hardButton) {
                difficulty = 3;
                difficultyName = "Difficile";
            } else {
                return; // Annul√©
            }

            // Demander le nom du joueur
            javafx.scene.control.TextInputDialog nameDialog = new javafx.scene.control.TextInputDialog("Champion");
            nameDialog.setTitle("Nom du Joueur");
            nameDialog.setHeaderText("üèÜ Vous d√©fiez le Bot " + difficultyName);
            nameDialog.setContentText("Votre nom de guerre:");

            Optional<String> nameResult = nameDialog.showAndWait();
            if (!nameResult.isPresent()) return;

            String playerName = nameResult.get().trim();
            if (playerName.isEmpty()) {
                showError("Nom invalide", "Le nom ne peut pas √™tre vide");
                return;
            }
            if (playerName.length() > 15) {
                showError("Nom trop long", "Maximum 15 caract√®res");
                return;
            }

            // Confirmation finale avec r√©capitulatif
            Alert finalAlert = new Alert(Alert.AlertType.CONFIRMATION);
            finalAlert.setTitle("‚öîÔ∏è DUEL IMMINENT");
            finalAlert.setHeaderText("Le combat va commencer !");
            finalAlert.setContentText("üë§ " + playerName + "\n" +
                    "        VS\n" +
                    "ü§ñ Bot " + difficultyName + "\n\n" +
                    getDetailedBotInfo(difficulty) + "\n\n" +
                    "üî• Pr√™t pour l'affrontement ?");

            Optional<ButtonType> finalResult = finalAlert.showAndWait();
            if (finalResult.isPresent() && finalResult.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startBotGame(playerName, difficulty);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer le mode bot: " + e.getMessage());
        }
    }

    private String getDetailedBotInfo(int difficulty) {
        switch (difficulty) {
            case 1:
                return "üòä IA D√©butante:\n" +
                        "‚Ä¢ Mouvements simples et pr√©visibles\n" +
                        "‚Ä¢ Pose des bombes al√©atoirement\n" +
                        "‚Ä¢ Id√©al pour apprendre le jeu";

            case 2:
                return "üòê IA √âquilibr√©e:\n" +
                        "‚Ä¢ Strat√©gie de base efficace\n" +
                        "‚Ä¢ √âvite les dangers principaux\n" +
                        "‚Ä¢ D√©fi √©quilibr√© et amusant";

            case 3:
                return "üòà IA Redoutable:\n" +
                        "‚Ä¢ Strat√©gies avanc√©es\n" +
                        "‚Ä¢ Vous traque intelligemment\n" +
                        "‚Ä¢ R√©agit rapidement aux menaces\n" +
                        "‚Ä¢ D√©fie m√™me les experts !";

            default:
                return "IA de difficult√© standard";
        }
    }

    @FXML
    private void onBotTutorial(ActionEvent event) {
        Alert tutorialAlert = new Alert(Alert.AlertType.INFORMATION);
        tutorialAlert.setTitle("üìñ Tutoriel Mode Bot");
        tutorialAlert.setHeaderText("Comment jouer contre l'IA");

        StringBuilder tutorial = new StringBuilder();
        tutorial.append("üéØ OBJECTIF:\n");
        tutorial.append("√âliminez le bot avec vos bombes avant qu'il ne vous √©limine !\n\n");

        tutorial.append("üéÆ VOS CONTR√îLES:\n");
        tutorial.append("‚Ä¢ Z/Q/S/D : Se d√©placer\n");
        tutorial.append("‚Ä¢ ESPACE : Poser une bombe\n");
        tutorial.append("‚Ä¢ T : Changer de th√®me visuel\n");
        tutorial.append("‚Ä¢ R : Recommencer la partie\n");
        tutorial.append("‚Ä¢ ESC : Retour au menu\n\n");

        tutorial.append("ü§ñ COMPORTEMENT DE L'IA:\n");
        tutorial.append("‚Ä¢ Analyse le plateau en temps r√©el\n");
        tutorial.append("‚Ä¢ Adapte sa strat√©gie selon la difficult√©\n");
        tutorial.append("‚Ä¢ Peut vous surprendre avec des tactiques inattendues\n\n");

        tutorial.append("‚ö†Ô∏è R√àGLES IMPORTANTES:\n");
        tutorial.append("‚Ä¢ Vos propres bombes vous tuent !\n");
        tutorial.append("‚Ä¢ Explosions durent 1.5 seconde\n");
        tutorial.append("‚Ä¢ Cooldown de 10 secondes entre bombes\n");
        tutorial.append("‚Ä¢ Pas de protection contre ses bombes\n\n");

        tutorial.append("üí° CONSEILS POUR BATTRE L'IA:\n");
        tutorial.append("‚Ä¢ Utilisez votre cr√©ativit√© humaine\n");
        tutorial.append("‚Ä¢ Anticipez ses mouvements\n");
        tutorial.append("‚Ä¢ Pi√©gez-la dans des coins\n");
        tutorial.append("‚Ä¢ Restez impr√©visible !");

        tutorialAlert.setContentText(tutorial.toString());
        tutorialAlert.showAndWait();
    }
    // Ajout de la m√©thode pour le mode CTF dans GameModeController.java

    /**
     * Lance le mode Capture The Flag
     */


    /**
     * Demande les noms des joueurs pour le mode CTF
     */
    private String[] getCTFPlayerNames(int playerCount) {
        String[] names = new String[playerCount];
        String[] defaultNames = {"Conqu√©rant", "D√©fenseur", "Strat√®ge", "Tacticien"};
        String[] colors = {"üî¥", "üîµ", "üü°", "üü¢"};
        String[] controls = {"ZQSD + A", "‚Üë‚Üì‚Üê‚Üí + ENTR√âE", "IJKL + U", "8456 + 7"};

        for (int i = 0; i < playerCount; i++) {
            TextInputDialog dialog = new TextInputDialog(defaultNames[i]);
            dialog.setTitle("Nom du Joueur " + (i + 1));
            dialog.setHeaderText(colors[i] + " Joueur " + (i + 1) + " (" + controls[i] + ")");
            dialog.setContentText("Nom du guerrier:");

            Optional<String> result = dialog.showAndWait();
            if (!result.isPresent()) {
                return null; // Annul√©
            }

            String name = result.get().trim();
            if (name.isEmpty()) {
                showError("Nom invalide", "Le nom ne peut pas √™tre vide");
                i--; // Recommencer
                continue;
            }

            if (name.length() > 15) {
                showError("Nom trop long", "Maximum 15 caract√®res");
                i--; // Recommencer
                continue;
            }

            names[i] = name;
        }

        // V√©rifier unicit√©
        for (int i = 0; i < playerCount; i++) {
            for (int j = i + 1; j < playerCount; j++) {
                if (names[i].equals(names[j])) {
                    showError("Noms identiques", "Tous les joueurs doivent avoir des noms diff√©rents");
                    return getCTFPlayerNames(playerCount); // Recommencer
                }
            }
        }

        return names;
    }

    /**
     * Affiche le tutoriel du mode Capture The Flag
     */
    @FXML
    private void onCTFTutorial(ActionEvent event) {
        Alert tutorialAlert = new Alert(Alert.AlertType.INFORMATION);
        tutorialAlert.setTitle("üìñ Tutoriel Capture The Flag");
        tutorialAlert.setHeaderText("Comment ma√Ætriser le mode CTF");

        StringBuilder tutorial = new StringBuilder();
        tutorial.append("üéØ OBJECTIF PRINCIPAL:\n");
        tutorial.append("Soyez le premier √† capturer TOUS les drapeaux adverses !\n\n");

        tutorial.append("üèÅ PHASE 1 - PLACEMENT DES DRAPEAUX:\n");
        tutorial.append("‚Ä¢ Chaque joueur place son drapeau √† tour de r√¥le\n");
        tutorial.append("‚Ä¢ Choisissez bien votre position (facile √† d√©fendre ?)\n");
        tutorial.append("‚Ä¢ Une fois plac√©, le drapeau ne bouge plus\n\n");

        tutorial.append("‚öîÔ∏è PHASE 2 - COMBAT ET CAPTURE:\n");
        tutorial.append("‚Ä¢ Marchez sur un drapeau ennemi pour le capturer\n");
        tutorial.append("‚Ä¢ √âliminez vos adversaires avec des bombes\n");
        tutorial.append("‚Ä¢ D√©fendez votre propre drapeau\n\n");

        tutorial.append("üíÄ R√àGLE SP√âCIALE - √âLIMINATION:\n");
        tutorial.append("‚Ä¢ Joueur √©limin√© = peut encore poser des bombes !\n");
        tutorial.append("‚Ä¢ Ses drapeaux captur√©s retournent √† leur place\n");
        tutorial.append("‚Ä¢ Il peut aider/g√™ner les survivants\n\n");

        tutorial.append("üèÜ CONDITIONS DE VICTOIRE:\n");
        tutorial.append("‚Ä¢ Capturer tous les drapeaux des autres joueurs\n");
        tutorial.append("‚Ä¢ √ätre le dernier non-√©limin√© avec des drapeaux\n\n");

        tutorial.append("üí° STRAT√âGIES GAGNANTES:\n");
        tutorial.append("‚Ä¢ Placez votre drapeau dans un coin prot√©g√©\n");
        tutorial.append("‚Ä¢ √âliminez d'abord les joueurs avec beaucoup de drapeaux\n");
        tutorial.append("‚Ä¢ Utilisez les joueurs √©limin√©s comme alli√©s\n");
        tutorial.append("‚Ä¢ Restez mobile, ne campez pas trop\n");
        tutorial.append("‚Ä¢ Anticipez les mouvements adverses");

        tutorialAlert.setContentText(tutorial.toString());
        tutorialAlert.showAndWait();
    }
    /**
     * Lance le mode Capture The Flag
     */
    @FXML
    private void onCTFMode(ActionEvent event) {
        try {
            System.out.println("Lancement du mode Capture The Flag");

            // S√©lection du nombre de joueurs pour CTF
            Alert playerCountAlert = new Alert(Alert.AlertType.CONFIRMATION);
            playerCountAlert.setTitle("üèÅ CAPTURE THE FLAG");
            playerCountAlert.setHeaderText("Combien de joueurs pour ce mode strat√©gique ?");

            StringBuilder content = new StringBuilder();
            content.append("üéØ Mode Capture The Flag - Strat√©gie pure !\n\n");
            content.append("üèÅ Objectif : Capturez TOUS les drapeaux adverses\n");
            content.append("üíÄ Les joueurs √©limin√©s peuvent encore bombarder\n");
            content.append("üìç Phase 1 : Placement des drapeaux\n");
            content.append("‚öîÔ∏è Phase 2 : Combat et capture\n\n");
            content.append("Choisissez le nombre de participants :");

            playerCountAlert.setContentText(content.toString());

            ButtonType twoPlayersButton = new ButtonType("üë• 2 Joueurs");
            ButtonType threePlayersButton = new ButtonType("üë•üë• 3 Joueurs");
            ButtonType fourPlayersButton = new ButtonType("üë•üë•üë• 4 Joueurs");
            ButtonType cancelButton = new ButtonType("Annuler");

            playerCountAlert.getButtonTypes().setAll(twoPlayersButton, threePlayersButton, fourPlayersButton, cancelButton);

            Optional<ButtonType> result = playerCountAlert.showAndWait();
            if (!result.isPresent()) return;

            int playerCount = 2;
            if (result.get() == twoPlayersButton) {
                playerCount = 2;
            } else if (result.get() == threePlayersButton) {
                playerCount = 3;
            } else if (result.get() == fourPlayersButton) {
                playerCount = 4;
            } else {
                return; // Annul√©
            }

            // Demander les noms des joueurs
            String[] playerNames = getCTFPlayerNames(playerCount);
            if (playerNames == null) return; // Annul√©

            // Confirmation finale avec d√©tails CTF
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("üèÅ BATAILLE CTF IMMINENTE");
            confirmAlert.setHeaderText("La guerre des drapeaux va commencer !");

            StringBuilder confirmContent = new StringBuilder();
            confirmContent.append("‚öîÔ∏è Participants CTF :\n");
            String[] colors = {"üî¥", "üîµ", "üü°", "üü¢"};
            String[] controls = {"ZQSD + A", "‚Üë‚Üì‚Üê‚Üí + ENTR√âE", "IJKL + U", "8456 + 7"};

            for (int i = 0; i < playerCount; i++) {
                confirmContent.append(colors[i]).append(" ").append(playerNames[i]);
                confirmContent.append(" (").append(controls[i]).append(")\n");
            }

            confirmContent.append("\nüéØ R√àGLES SP√âCIALES CTF :\n");
            confirmContent.append("‚Ä¢ Placez votre drapeau strat√©giquement\n");
            confirmContent.append("‚Ä¢ Capturez TOUS les drapeaux adverses\n");
            confirmContent.append("‚Ä¢ Joueurs √©limin√©s = peuvent encore bombarder\n");
            confirmContent.append("‚Ä¢ Drapeaux tombent si porteur √©limin√©\n\n");
            confirmContent.append("üî• Pr√™t pour cette guerre tactique ?");

            confirmAlert.setContentText(confirmContent.toString());

            Optional<ButtonType> finalResult = confirmAlert.showAndWait();
            if (finalResult.isPresent() && finalResult.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startCTFGame(playerNames);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer le mode CTF: " + e.getMessage());
        }
    }

    //profil
    @FXML
    private void onSelectProfile() {
        openProfileSelection();
    }

    private void updateCurrentProfileDisplay() {
        if (currentProfileLabel != null) {
            if (currentProfile != null) {
                currentProfileLabel.setText("üë§ " + currentProfile.getPlayerName() +
                        " (" + currentProfile.getRank().getDisplayName() + ")");
                currentProfileLabel.setStyle("-fx-text-fill: #27ae60; -fx-font-weight: bold;");
            } else {
                currentProfileLabel.setText("üë§ Aucun profil s√©lectionn√©");
                currentProfileLabel.setStyle("-fx-text-fill: #e74c3c;");
            }
        }
    }

    private void applyProfilePreferences() {
        if (currentProfile == null) return;

        try {
            // Mettre √† jour les noms par d√©faut avec le profil
            player1Name = currentProfile.getPlayerName();
            player2Name = "Adversaire"; // Nom par d√©faut pour le second joueur

            // Autres pr√©f√©rences pourraient √™tre appliqu√©es ici
            // (th√®me, son, etc.)

            System.out.println("Pr√©f√©rences appliqu√©es pour: " + currentProfile.getPlayerName());

        } catch (Exception e) {
            System.err.println("Erreur lors de l'application des pr√©f√©rences: " + e.getMessage());
        }
    }
    private void showInfo(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    public static void setCurrentGameProfile(PlayerProfile profile) {
        currentGameProfile = profile;
        System.out.println("üéÆ Profil d√©fini pour la partie: " + (profile != null ? profile.getPlayerName() : "Aucun"));
    }

    public static PlayerProfile getCurrentGameProfile() {
        return currentGameProfile;
    }

    /**
     * V√©rifie si un profil est s√©lectionn√©
     */
    public static boolean hasProfileSelected() {
        return currentGameProfile != null;
    }



    // Modifiez la m√©thode onSelectProfile existante pour d√©finir le profil courant
    private void openProfileSelection() {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/profile/profile_selection.fxml"));
            Parent root = loader.load();

            ProfileSelectionController controller = loader.getController();
            controller.setBombermanApp(bombermanApp);

            Stage stage = new Stage();
            stage.setTitle("üéÆ Gestion des Profils - Super Bomberman");
            stage.setScene(new Scene(root, 900, 600));
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.setResizable(true);

            if (bombermanApp != null && bombermanApp.getPrimaryStage() != null) {
                Stage primaryStage = bombermanApp.getPrimaryStage();
                stage.initOwner(primaryStage);
                stage.setX(primaryStage.getX() + (primaryStage.getWidth() - 900) / 2);
                stage.setY(primaryStage.getY() + (primaryStage.getHeight() - 600) / 2);
            }

            stage.showAndWait();

            if (controller.isProfileSelected()) {
                currentProfile = controller.getSelectedProfile();
                // ‚úÖ NOUVEAU: D√©finir le profil pour toute la session de jeu
                setCurrentGameProfile(currentProfile);

                updateCurrentProfileDisplay();

                showInfo("Profil s√©lectionn√©",
                        "‚úÖ Profil actif: " + currentProfile.getPlayerName() + "\n" +
                                "üèÜ Rang: " + currentProfile.getRank().getDisplayName() + "\n" +
                                "üéÆ Parties jou√©es: " + currentProfile.getTotalGamesPlayed() + "\n" +
                                "üìä Taux de victoire: " + String.format("%.1f%%", currentProfile.getWinRatio()));

                applyProfilePreferences();
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir la gestion des profils: " + e.getMessage());
        }
    }

    /**
     * G√®re la s√©lection d'un niveau via FileChooser
     */
    @FXML
    private void onSelectLevel(ActionEvent event) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("S√©lectionner un niveau");
        fileChooser.getExtensionFilters().add(
            new FileChooser.ExtensionFilter("Fichiers XML", "*.json")
        );
        
        // D√©finir le r√©pertoire par d√©faut
        File defaultDir = new File("src/main/resources/fr/univ/bomberman/level");
        if (defaultDir.exists()) {
            fileChooser.setInitialDirectory(defaultDir);
        }
        
        File file = fileChooser.showOpenDialog(((Node) event.getSource()).getScene().getWindow());
        if (file != null) {
            try {
                // Convertir le chemin en chemin relatif si possible
                String relativePath = getRelativePath(file);
                if (bombermanApp != null) {
                    bombermanApp.setSelectedLevelPath(relativePath);
                    showInfo("Niveau s√©lectionn√©", "Le niveau a √©t√© s√©lectionn√© avec succ√®s !");
                }
            } catch (Exception e) {
                showError("Erreur", "Impossible de s√©lectionner le niveau: " + e.getMessage());
            }
        }
    }

    /**
     * Convertit un chemin absolu en chemin relatif par rapport au dossier resources
     */
    private String getRelativePath(File file) {
        String absolutePath = file.getAbsolutePath();
        String resourcesPath = "src/main/resources/fr/univ/bomberman/level";
        
        // Si le fichier est dans le dossier resources, retourner le chemin relatif
        if (absolutePath.contains(resourcesPath)) {
            int index = absolutePath.indexOf(resourcesPath);
            return absolutePath.substring(index + resourcesPath.length() + 1);
        }
        
        // Sinon, retourner le chemin absolu
        return absolutePath;
    }

}