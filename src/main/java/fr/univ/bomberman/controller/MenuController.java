// FILE: src/main/java/fr/univ/bomberman/controller/MenuController.java
package fr.univ.bomberman.controller;

import fr.univ.bomberman.BombermanApp;
import fr.univ.bomberman.exceptions.BombermanException;
import fr.univ.bomberman.utils.ProfileManager;
import fr.univ.bomberman.model.PlayerProfile;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.util.List;
import java.util.Optional;

/**
 * Contr√¥leur pour le menu principal avec support avanc√© des profils.
 */
public class MenuController {

    private BombermanApp bombermanApp;
    private String player1Name = "Joueur 1";
    private String player2Name = "Joueur 2";
    private PlayerProfile currentProfile; // ‚úÖ NOUVEAU: Profil actuellement s√©lectionn√©

    // ‚úÖ AJOUT DES R√âF√âRENCES AUX NOUVEAUX BOUTONS
    @FXML private Button profileButton;
    @FXML private Button selectProfileButton;
    @FXML private Button globalStatsButton;

    // ‚úÖ NOUVEAU: Label pour afficher le profil actuel
    @FXML private Label currentProfileLabel;

    /**
     * Initialisation du contr√¥leur
     */
    @FXML
    public void initialize() {
        updateCurrentProfileDisplay();
        System.out.println("MenuController initialis√© avec gestion avanc√©e des profils");
    }

    /**
     * D√©finit la r√©f√©rence vers l'application principale
     */
    public void setBombermanApp(BombermanApp app) {
        this.bombermanApp = app;
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Met √† jour l'affichage du profil actuel
     */
    private void updateCurrentProfileDisplay() {
        if (currentProfileLabel != null) {
            if (currentProfile != null) {
                currentProfileLabel.setText("üë§ " + currentProfile.getPlayerName() +
                        " (" + currentProfile.getRank().getDisplayName() + ")");
                currentProfileLabel.setStyle("-fx-text-fill: #27ae60; -fx-font-weight: bold;");
            } else {
                currentProfileLabel.setText("üë§ Aucun profil s√©lectionn√©");
                currentProfileLabel.setStyle("-fx-text-fill: #e74c3c;");
            }
        }
    }

    /**
     * ‚úÖ M√âTHODE AM√âLIOR√âE: Gestion de profil avec nouvelle interface
     */
    @FXML
    private void onProfile() {
        openProfileSelection();
    }

    /**
     * ‚úÖ M√âTHODE AM√âLIOR√âE: S√©lection de profil avec nouvelle interface
     */
    @FXML
    private void onSelectProfile() {
        openProfileSelection();
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Ouvre l'interface de s√©lection de profils
     */
    private void openProfileSelection() {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/profile/profile_selection.fxml"));
            Parent root = loader.load();

            ProfileSelectionController controller = loader.getController();
            controller.setBombermanApp(bombermanApp);

            Stage stage = new Stage();
            stage.setTitle("üéÆ Gestion des Profils - Super Bomberman");
            stage.setScene(new Scene(root, 700, 600));
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.setResizable(true);

            // Centrer la fen√™tre
            if (bombermanApp != null && bombermanApp.getPrimaryStage() != null) {
                Stage primaryStage = bombermanApp.getPrimaryStage();
                stage.initOwner(primaryStage);
                stage.setX(primaryStage.getX() + (primaryStage.getWidth() - 900) / 2);
                stage.setY(primaryStage.getY() + (primaryStage.getHeight() - 600) / 2);
            }

            stage.showAndWait();

            // R√©cup√©rer le profil s√©lectionn√©
            if (controller.isProfileSelected()) {
                currentProfile = controller.getSelectedProfile();
                updateCurrentProfileDisplay();

                // Message de confirmation
                showInfo("Profil s√©lectionn√©",
                        "‚úÖ Profil actif: " + currentProfile.getPlayerName() + "\n" +
                                "üèÜ Rang: " + currentProfile.getRank().getDisplayName() + "\n" +
                                "üéÆ Parties jou√©es: " + currentProfile.getTotalGamesPlayed() + "\n" +
                                "üìä Taux de victoire: " + String.format("%.1f%%", currentProfile.getWinRatio()));

                // Appliquer les pr√©f√©rences du profil
                applyProfilePreferences();
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir la gestion des profils: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Applique les pr√©f√©rences du profil s√©lectionn√©
     */
    private void applyProfilePreferences() {
        if (currentProfile == null) return;

        try {
            // Mettre √† jour les noms par d√©faut avec le profil
            player1Name = currentProfile.getPlayerName();
            player2Name = "Adversaire"; // Nom par d√©faut pour le second joueur

            // Autres pr√©f√©rences pourraient √™tre appliqu√©es ici
            // (th√®me, son, etc.)

            System.out.println("Pr√©f√©rences appliqu√©es pour: " + currentProfile.getPlayerName());

        } catch (Exception e) {
            System.err.println("Erreur lors de l'application des pr√©f√©rences: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ M√âTHODE CORRIG√âE: Statistiques globales am√©lior√©es
     */
    @FXML
    private void onGlobalStats() {
        try {
            ProfileManager profileManager = ProfileManager.getInstance();
            List<String> profiles = profileManager.listProfiles();

            if (profiles.isEmpty()) {
                showInfo("Aucune statistique",
                        "üö´ Aucun profil trouv√©\n\n" +
                                "Cr√©ez des profils et jouez des parties pour g√©n√©rer des statistiques.");
                return;
            }

            ProfileManager.ProfileStats globalStats = profileManager.getGlobalStats();

            StringBuilder message = new StringBuilder();
            message.append("üìä STATISTIQUES GLOBALES BOMBERMAN\n");
            message.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");

            message.append("üë• Profils cr√©√©s: ").append(globalStats.getTotalProfiles()).append("\n");
            message.append("üéÆ Parties totales: ").append(globalStats.getTotalGamesPlayed()).append("\n");
            message.append("üèÜ Victoires totales: ").append(globalStats.getTotalWins()).append("\n");
            message.append("üìà Taux de victoire global: ").append(String.format("%.1f%%", globalStats.getGlobalWinRate())).append("\n");
            message.append("‚è±Ô∏è Temps de jeu total: ").append(globalStats.getFormattedTotalPlayTime()).append("\n\n");

            message.append("üî• TOP JOUEUR:\n");
            message.append("üë§ ").append(globalStats.getMostActivePlayer()).append("\n");
            message.append("üéÆ ").append(globalStats.getMostGamesPlayed()).append(" parties jou√©es\n\n");

            // Ajouter le top 3 si plusieurs profils
            if (profiles.size() > 1) {
                message.append("üèÜ CLASSEMENT PAR TAUX DE VICTOIRE:\n");

                // Charger et trier les profils par taux de victoire
                profiles.stream()
                        .map(name -> {
                            try {
                                return profileManager.loadProfile(name);
                            } catch (BombermanException e) {
                                return null;
                            }
                        })
                        .filter(profile -> profile != null && profile.getTotalGamesPlayed() > 0)
                        .sorted((p1, p2) -> Double.compare(p2.getWinRatio(), p1.getWinRatio()))
                        .limit(3)
                        .forEach(profile -> {
                            String rank = "ü•á";
                            if (message.toString().contains("ü•á")) rank = "ü•à";
                            if (message.toString().contains("ü•à")) rank = "ü•â";

                            message.append(rank).append(" ").append(profile.getPlayerName())
                                    .append(" - ").append(String.format("%.1f%%", profile.getWinRatio()))
                                    .append(" (").append(profile.getTotalGamesPlayed()).append(" parties)\n");
                        });
            }

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("üìä Statistiques Globales");
            alert.setHeaderText("R√©capitulatif de tous les profils");
            alert.setContentText(message.toString());
            alert.getDialogPane().setPrefWidth(500);
            alert.getDialogPane().setPrefHeight(400);
            alert.setResizable(true);
            alert.showAndWait();

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de charger les statistiques globales: " + e.getMessage());
        }
    }


    @FXML
    private void onStartGame(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/game/mode_selection.fxml"));
            Parent root = loader.load();

            // Injecter la r√©f√©rence √† l'application
            GameModeController controller = loader.getController();
            if (controller != null) {
                controller.setBombermanApp(bombermanApp);
            }

            // Charger le CSS si disponible
            Scene scene = new Scene(root);
            try {
                scene.getStylesheets().add(getClass().getResource("/fr/univ/bomberman/css/game/mode_selection.css").toExternalForm());
            } catch (Exception cssEx) {
                System.out.println("CSS du menu de s√©lection non trouv√©, utilisation du style par d√©faut");
            }

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.setTitle("Super Bomberman - S√©lection du Mode");
            stage.setScene(scene);
            stage.setResizable(false);
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir le menu de s√©lection: " + e.getMessage());
        }
    }

    @FXML
    private void onQuit(ActionEvent event) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
        confirmAlert.setTitle("Quitter");
        confirmAlert.setHeaderText("Confirmation");
        confirmAlert.setContentText("Tu vas o√π comme √ßa ? " + "\n" + " Reste ici");

        Optional<ButtonType> result = confirmAlert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.close();
        }
    }


    /**
     * ‚úÖ NOUVELLE M√âTHODE: Cr√©er un nouveau profil rapidement
     */
    @FXML
    private void onCreateQuickProfile() {
        try {
            TextInputDialog dialog = new TextInputDialog("NouveauJoueur");
            dialog.setTitle("üÜï Cr√©ation rapide de profil");
            dialog.setHeaderText("Cr√©er un nouveau profil");
            dialog.setContentText("Nom du profil:");

            Optional<String> result = dialog.showAndWait();
            if (result.isPresent()) {
                String name = result.get().trim();

                if (name.isEmpty()) {
                    showError("Nom invalide", "Le nom ne peut pas √™tre vide.");
                    return;
                }

                if (name.length() > 15) {
                    showError("Nom trop long", "Maximum 15 caract√®res.");
                    return;
                }

                ProfileManager profileManager = ProfileManager.getInstance();
                if (profileManager.profileExists(name)) {
                    showError("Profil existant", "Un profil avec ce nom existe d√©j√†.");
                    return;
                }

                PlayerProfile newProfile = profileManager.loadProfile(name);
                profileManager.saveProfile(newProfile);

                currentProfile = newProfile;
                updateCurrentProfileDisplay();

                showInfo("Profil cr√©√©",
                        "‚úÖ Nouveau profil cr√©√©: " + name + "\n\n" +
                                "üéÆ Pr√™t √† jouer !\n" +
                                "üìä Vos statistiques seront sauvegard√©es.");
            }

        } catch (BombermanException e) {
            showError("Erreur", "Impossible de cr√©er le profil: " + e.getMessage());
        }
    }


    private void showError(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showInfo(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * NOUVELLE M√âTHODE: Affiche le tutoriel complet
     */
    @FXML
    private void onShowTutorial() {
        Alert tutorialAlert = new Alert(Alert.AlertType.INFORMATION);
        tutorialAlert.setTitle("üìñ Tutoriel Super Bomberman");
        tutorialAlert.setHeaderText("Guide complet pour bien commencer");

        StringBuilder tutorial = new StringBuilder();
        tutorial.append("üéØ OBJECTIF DU JEU:\n");
        tutorial.append("√âliminez vos adversaires avec des bombes tout en √©vitant les explosions !\n\n");

        tutorial.append("üéÆ CONTR√îLES DE BASE:\n");
        tutorial.append("‚Ä¢ Joueur 1: ZQSD pour se d√©placer, ESPACE pour poser une bombe\n");
        tutorial.append("‚Ä¢ Joueur 2: ‚Üë‚Üì‚Üê‚Üí pour se d√©placer, ENTR√âE pour poser une bombe\n");
        tutorial.append("‚Ä¢ T: Changer de th√®me visuel\n");
        tutorial.append("‚Ä¢ R: Red√©marrer la partie\n");
        tutorial.append("‚Ä¢ ESC: Retour au menu\n\n");

        tutorial.append("üí£ R√àGLES DES BOMBES:\n");
        tutorial.append("‚Ä¢ Les bombes explosent apr√®s 3 secondes\n");
        tutorial.append("‚Ä¢ Les explosions durent 1.5 seconde\n");
        tutorial.append("‚Ä¢ VOS PROPRES bombes vous tuent !\n");
        tutorial.append("‚Ä¢ Cooldown de 10 secondes entre chaque bombe\n");
        tutorial.append("‚Ä¢ Les explosions d√©truisent les briques mais pas les murs\n\n");

        tutorial.append("üèÜ CONDITIONS DE VICTOIRE:\n");
        tutorial.append("‚Ä¢ Mode Classique: √âliminez votre adversaire\n");
        tutorial.append("‚Ä¢ Bataille Royale: Soyez le dernier survivant\n");
        tutorial.append("‚Ä¢ CTF: Capturez tous les drapeaux adverses\n");
        tutorial.append("‚Ä¢ Contre IA: Battez l'intelligence artificielle\n\n");

        tutorial.append("üí° CONSEILS STRAT√âGIQUES:\n");
        tutorial.append("‚Ä¢ Utilisez les briques comme couverture\n");
        tutorial.append("‚Ä¢ Anticipez les mouvements adverses\n");
        tutorial.append("‚Ä¢ Attention aux explosions en cha√Æne\n");
        tutorial.append("‚Ä¢ Restez mobile, ne restez pas dans les coins\n");
        tutorial.append("‚Ä¢ Observez le cooldown de vos adversaires");

        tutorialAlert.setContentText(tutorial.toString());
        tutorialAlert.getDialogPane().setPrefWidth(600);
        tutorialAlert.getDialogPane().setPrefHeight(500);
        tutorialAlert.setResizable(true);
        tutorialAlert.showAndWait();
    }

    /**
     *  NOUVELLE M√âTHODE: Affiche les contr√¥les d√©taill√©s
     */
    @FXML
    private void onShowControls() {
        Alert controlsAlert = new Alert(Alert.AlertType.INFORMATION);
        controlsAlert.setTitle("üéÆ Contr√¥les D√©taill√©s");
        controlsAlert.setHeaderText("Guide complet des contr√¥les pour tous les modes");

        StringBuilder controls = new StringBuilder();
        controls.append("üë• MODE 2 JOUEURS:\n");
        controls.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        controls.append("üîµ Joueur 1:\n");
        controls.append("‚Ä¢ Z = Monter\n");
        controls.append("‚Ä¢ Q = Aller √† gauche\n");
        controls.append("‚Ä¢ S = Descendre\n");
        controls.append("‚Ä¢ D = Aller √† droite\n");
        controls.append("‚Ä¢ ESPACE = Poser une bombe\n\n");

        controls.append("üü¢ Joueur 2:\n");
        controls.append("‚Ä¢ ‚Üë = Monter\n");
        controls.append("‚Ä¢ ‚Üê = Aller √† gauche\n");
        controls.append("‚Ä¢ ‚Üì = Descendre\n");
        controls.append("‚Ä¢ ‚Üí = Aller √† droite\n");
        controls.append("‚Ä¢ ENTR√âE = Poser une bombe\n\n");

        controls.append("üë•üë• MODE 4 JOUEURS (Bataille Royale):\n");
        controls.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        controls.append("üî¥ Joueur 1: ZQSD + A (bombe)\n");
        controls.append("üîµ Joueur 2: ‚Üë‚Üì‚Üê‚Üí + ENTR√âE (bombe)\n");
        controls.append("üü° Joueur 3: IJKL + U (bombe)\n");
        controls.append("üü¢ Joueur 4: 8456 (pav√© num.) + 7 (bombe)\n\n");

        controls.append("ü§ñ MODE BOT:\n");
        controls.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        controls.append("üë§ Vous: ZQSD + ESPACE\n");
        controls.append("ü§ñ IA: Contr√¥l√©e automatiquement\n\n");

        controls.append("‚å®Ô∏è CONTR√îLES G√âN√âRAUX:\n");
        controls.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        controls.append("‚Ä¢ T = Changer de th√®me visuel\n");
        controls.append("‚Ä¢ R = Red√©marrer la partie\n");
        controls.append("‚Ä¢ ESC = Retour au menu principal\n");
        controls.append("‚Ä¢ E = Forcer la fin de partie\n\n");

        controls.append("üí° ASTUCES:\n");
        controls.append("‚Ä¢ Maintenez une direction pour mouvement continu (mode 2J)\n");
        controls.append("‚Ä¢ Une touche = un mouvement (mode 4J et CTF)\n");
        controls.append("‚Ä¢ Les cooldowns s'affichent en temps r√©el");

        controlsAlert.setContentText(controls.toString());
        controlsAlert.getDialogPane().setPrefWidth(550);
        controlsAlert.getDialogPane().setPrefHeight(600);
        controlsAlert.setResizable(true);
        controlsAlert.showAndWait();
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Affiche les informations sur les th√®mes
     */
    @FXML
    private void onShowThemes() {
        Alert themesAlert = new Alert(Alert.AlertType.INFORMATION);
        themesAlert.setTitle("üé® Th√®mes Visuels");
        themesAlert.setHeaderText("Personnalisez l'apparence de votre jeu");

        StringBuilder themes = new StringBuilder();
        themes.append("üé® TH√àMES DISPONIBLES:\n");
        themes.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");

        themes.append("üîπ TH√àME PAR D√âFAUT:\n");
        themes.append("‚Ä¢ Style classique Bomberman\n");
        themes.append("‚Ä¢ Couleurs traditionnelles\n");
        themes.append("‚Ä¢ Adapt√© √† tous les joueurs\n\n");

        themes.append("üî∏ TH√àME POK√âMON:\n");
        themes.append("‚Ä¢ Personnages inspir√©s de Pok√©mon\n");
        themes.append("‚Ä¢ Couleurs vives et amusantes\n");
        themes.append("‚Ä¢ Parfait pour les fans d'anime\n\n");

        themes.append("‚öôÔ∏è COMMENT CHANGER DE TH√àME:\n");
        themes.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        themes.append("‚Ä¢ En jeu: Appuyez sur la touche T\n");
        themes.append("‚Ä¢ Dans les profils: S√©lectionnez votre th√®me pr√©f√©r√©\n");
        themes.append("‚Ä¢ Le th√®me sera sauvegard√© avec votre profil\n\n");

        themes.append("üõ†Ô∏è AJOUTER VOS PROPRES TH√àMES:\n");
        themes.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        themes.append("1. Cr√©ez un dossier dans: resources/fr/univ/bomberman/image/[nom_theme]/\n");
        themes.append("2. Ajoutez vos images (player1.png, bomb.png, etc.)\n");
        themes.append("3. Red√©marrez le jeu\n");
        themes.append("4. Votre th√®me appara√Ætra automatiquement\n\n");

        themes.append("üìù IMAGES REQUISES:\n");
        themes.append("‚Ä¢ player1.png, player2.png, player3.png, player4.png\n");
        themes.append("‚Ä¢ bomb.png, explosion.png\n");
        themes.append("‚Ä¢ wall.png, brick.png, ground.png\n\n");

        themes.append("üí° Format recommand√©: 40x40 pixels, PNG avec transparence");

        themesAlert.setContentText(themes.toString());
        themesAlert.getDialogPane().setPrefWidth(600);
        themesAlert.getDialogPane().setPrefHeight(500);
        themesAlert.setResizable(true);
        themesAlert.showAndWait();
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Affiche les informations sur le jeu
     */
    @FXML
    private void onAbout() {
        Alert aboutAlert = new Alert(Alert.AlertType.INFORMATION);
        aboutAlert.setTitle("‚ÑπÔ∏è √Ä propos de Super Bomberman");
        aboutAlert.setHeaderText("Informations sur le jeu");

        StringBuilder about = new StringBuilder();
        about.append("üí£ SUPER BOMBERMAN\n");
        about.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");

        about.append("üéÆ VERSION: 2.0 Enhanced Edition\n");
        about.append("üë®‚Äçüíª D√âVELOPP√â AVEC: JavaFX + Maven\n");
        about.append("üìÖ DERNI√àRE MISE √Ä JOUR: 2025\n\n");

        about.append("üåü FONCTIONNALIT√âS:\n");
        about.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        about.append("‚úÖ Mode Classique 2 joueurs\n");
        about.append("‚úÖ Bataille Royale 4 joueurs\n");
        about.append("‚úÖ Mode Capture The Flag\n");
        about.append("‚úÖ Intelligence Artificielle (3 niveaux)\n");
        about.append("‚úÖ Syst√®me de profils et statistiques\n");
        about.append("‚úÖ Th√®mes visuels personnalisables\n");
        about.append("‚úÖ Sauvegarde automatique des parties\n");
        about.append("‚úÖ Classements et rangs\n\n");

        about.append("üéØ MODES DE JEU:\n");
        about.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        about.append("‚Ä¢ üî• Classique: Duel traditionnel\n");
        about.append("‚Ä¢ ‚öîÔ∏è Bataille Royale: Combat √† 4 joueurs\n");
        about.append("‚Ä¢ üèÅ CTF: Strat√©gie et capture\n");
        about.append("‚Ä¢ ü§ñ IA: D√©fi contre l'ordinateur\n\n");

        about.append("üìä SYST√àME DE PROFILS:\n");
        about.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        about.append("‚Ä¢ Sauvegarde automatique des statistiques\n");
        about.append("‚Ä¢ Syst√®me de rangs et niveaux\n");
        about.append("‚Ä¢ Import/Export des profils\n");
        about.append("‚Ä¢ Pr√©f√©rences personnalis√©es\n\n");

        about.append("üèÜ RANGS DISPONIBLES:\n");
        about.append("ü•â Bronze ‚Üí ü•à Argent ‚Üí ü•á Or ‚Üí üíé Platine ‚Üí üëë Diamant\n\n");

        about.append("üí° CONSEIL: Cr√©ez un profil pour sauvegarder vos exploits !\n\n");

        about.append("üéÆ Amusez-vous bien et que le meilleur gagne ! üí•");

        aboutAlert.setContentText(about.toString());
        aboutAlert.getDialogPane().setPrefWidth(550);
        aboutAlert.getDialogPane().setPrefHeight(600);
        aboutAlert.setResizable(true);
        aboutAlert.showAndWait();
    }
}