// FILE: src/main/java/fr/univ/bomberman/controller/MenuController.java
package fr.univ.bomberman.controller;

import fr.univ.bomberman.BombermanApp;
import fr.univ.bomberman.exceptions.BombermanException;
import fr.univ.bomberman.util.ProfileManager; // ‚úÖ IMPORT AJOUT√â

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.stage.Stage;

import java.util.List;     // ‚úÖ IMPORT AJOUT√â
import java.util.Optional;

/**
 * Contr√¥leur pour le menu principal avec support des modes de jeu.
 */
public class MenuController {

    private BombermanApp bombermanApp;
    private String player1Name = "Joueur 1";
    private String player2Name = "Joueur 2";

    // ‚úÖ AJOUT DES R√âF√âRENCES AUX NOUVEAUX BOUTONS
    @FXML
    private Button ctfButton;

    @FXML
    private Button botButton;

    @FXML
    private Button fourPlayerButton;

    /**
     * D√©finit la r√©f√©rence vers l'application principale
     */
    public void setBombermanApp(BombermanApp app) {
        this.bombermanApp = app;
    }

    // ============================================================================
    // ‚úÖ NOUVELLES M√âTHODES POUR LES BOUTONS DU MENU FXML
    // ============================================================================

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Lance le mode Capture the Flag (appel√©e par le bouton CTF)
     */
    @FXML
    private void onStartCTF(ActionEvent event) {
        try {
            Alert infoAlert = new Alert(Alert.AlertType.INFORMATION);
            infoAlert.setTitle("üèÅ CAPTURE THE FLAG");
            infoAlert.setHeaderText("Mode de jeu strat√©gique !");
            infoAlert.setContentText("üéØ OBJECTIF: Capturez TOUS les drapeaux adverses !\n\n" +
                    "üìã R√àGLES:\n" +
                    "‚Ä¢ Chaque joueur place son drapeau au d√©but\n" +
                    "‚Ä¢ Ramassez les drapeaux ennemis en marchant dessus\n" +
                    "‚Ä¢ Les joueurs √©limin√©s peuvent encore bombarder !\n" +
                    "‚Ä¢ Premier √† capturer tous les drapeaux gagne\n\n" +
                    "üöÄ Pr√™t pour la strat√©gie ultime ?");

            Optional<ButtonType> result = infoAlert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                startCTFGame();
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur CTF", "Impossible de lancer le mode CTF: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Lance le mode contre bot (appel√©e par le bouton Bot)
     */
    @FXML
    private void onStartBotGame(ActionEvent event) {
        try {
            // Demander le nom du joueur
            TextInputDialog nameDialog = new TextInputDialog("Joueur");
            nameDialog.setTitle("Mode Bot - Nom du joueur");
            nameDialog.setHeaderText("ü§ñ Affrontez l'Intelligence Artificielle !");
            nameDialog.setContentText("Votre nom:");

            Optional<String> nameResult = nameDialog.showAndWait();
            if (!nameResult.isPresent() || nameResult.get().trim().isEmpty()) {
                return; // Annul√©
            }

            String playerName = nameResult.get().trim();
            if (playerName.length() > 15) {
                showError("Nom trop long", "Maximum 15 caract√®res");
                return;
            }

            // Choisir la difficult√© du bot
            Alert difficultyAlert = new Alert(Alert.AlertType.CONFIRMATION);
            difficultyAlert.setTitle("Difficult√© du Bot");
            difficultyAlert.setHeaderText("ü§ñ Choisissez votre adversaire IA");
            difficultyAlert.setContentText("Quel niveau de d√©fi voulez-vous ?");

            ButtonType easyButton = new ButtonType("üòä Facile");
            ButtonType mediumButton = new ButtonType("üòê Moyen");
            ButtonType hardButton = new ButtonType("üòà Difficile");
            ButtonType cancelButton = new ButtonType("Annuler");

            difficultyAlert.getButtonTypes().setAll(easyButton, mediumButton, hardButton, cancelButton);

            Optional<ButtonType> difficultyResult = difficultyAlert.showAndWait();
            if (!difficultyResult.isPresent()) {
                return; // Annul√©
            }

            int botDifficulty = 2; // Moyen par d√©faut
            String difficultyName = "Moyen";

            if (difficultyResult.get() == easyButton) {
                botDifficulty = 1;
                difficultyName = "Facile";
            } else if (difficultyResult.get() == mediumButton) {
                botDifficulty = 2;
                difficultyName = "Moyen";
            } else if (difficultyResult.get() == hardButton) {
                botDifficulty = 3;
                difficultyName = "Difficile";
            } else {
                return; // Annul√©
            }

            // Confirmation finale
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("ü§ñ D√©fi contre l'IA");
            confirmAlert.setHeaderText("Pr√™t pour le combat ?");
            confirmAlert.setContentText("üë§ " + playerName + "\n" +
                    "        VS\n" +
                    "ü§ñ Bot " + difficultyName + "\n\n" +
                    getBotDescription(botDifficulty) + "\n\n" +
                    "Commencer le duel ?");

            Optional<ButtonType> confirmResult = confirmAlert.showAndWait();
            if (confirmResult.isPresent() && confirmResult.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startBotGame(playerName, botDifficulty);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer le mode bot: " + e.getMessage());
        }
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Lance le mode 4 joueurs (appel√©e par le bouton 4 joueurs)
     */
    @FXML
    private void onStartFourPlayer(ActionEvent event) {
        try {
            Alert introAlert = new Alert(Alert.AlertType.INFORMATION);
            introAlert.setTitle("‚öîÔ∏è BATAILLE ROYALE 4 JOUEURS ‚öîÔ∏è");
            introAlert.setHeaderText("Mode de combat ultime !");
            introAlert.setContentText("üî• Affrontement √† 4 joueurs !\n" +
                    "üèÜ Dernier survivant remporte tout !\n" +
                    "üí£ Bombes mortelles pour tous !\n\n" +
                    "Pr√™t pour la bataille ?");

            Optional<ButtonType> result = introAlert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                start4PlayerGame();
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de lancer le mode 4 joueurs: " + e.getMessage());
        }
    }

    // ============================================================================
    // ‚úÖ M√âTHODES EXISTANTES (conserv√©es)
    // ============================================================================

    @FXML
    private void onStartGame(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/game/mode_selection.fxml"));
            Parent root = loader.load();

            // Injecter la r√©f√©rence √† l'application
            GameModeController controller = loader.getController();
            if (controller != null) {
                controller.setBombermanApp(bombermanApp);
            }

            // Charger le CSS si disponible
            Scene scene = new Scene(root);
            try {
                scene.getStylesheets().add(getClass().getResource("/fr/univ/bomberman/css/game/mode_selection.css").toExternalForm());
            } catch (Exception cssEx) {
                System.out.println("CSS du menu de s√©lection non trouv√©, utilisation du style par d√©faut");
            }

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.setTitle("Super Bomberman - S√©lection du Mode");
            stage.setScene(scene);
            stage.setResizable(false);
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir le menu de s√©lection: " + e.getMessage());
        }
    }

    /**
     * Configuration et lancement du jeu CTF
     */
    private void startCTFGame() {
        try {
            // Demander le nombre de joueurs
            Alert playerCountAlert = new Alert(Alert.AlertType.CONFIRMATION);
            playerCountAlert.setTitle("Nombre de joueurs CTF");
            playerCountAlert.setHeaderText("üèÅ Combien de joueurs pour le CTF ?");
            playerCountAlert.setContentText("Plus il y a de joueurs, plus c'est strat√©gique !");

            ButtonType twoPlayers = new ButtonType("üë• 2 Joueurs");
            ButtonType threePlayers = new ButtonType("üë•üë§ 3 Joueurs");
            ButtonType fourPlayers = new ButtonType("üë•üë• 4 Joueurs");
            ButtonType cancel = new ButtonType("Annuler");

            playerCountAlert.getButtonTypes().setAll(twoPlayers, threePlayers, fourPlayers, cancel);

            Optional<ButtonType> countResult = playerCountAlert.showAndWait();
            if (!countResult.isPresent() || countResult.get() == cancel) {
                return;
            }

            int playerCount = 2;
            if (countResult.get() == threePlayers) playerCount = 3;
            else if (countResult.get() == fourPlayers) playerCount = 4;

            // Obtenir les noms des joueurs
            String[] playerNames = getCTFPlayerNames(playerCount);
            if (playerNames == null) return; // Annul√©

            // Confirmer le lancement
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("üèÅ Lancement CTF");
            confirmAlert.setHeaderText("Capture the Flag - Configuration finale");

            StringBuilder content = new StringBuilder();
            content.append("üéÆ Mode: Capture the Flag\n");
            content.append("üë• Joueurs: ").append(playerCount).append("\n\n");

            String[] emojis = {"üî¥", "üîµ", "üü°", "üü¢"};
            String[] controls = {"ZQSD + A", "‚Üë‚Üì‚Üê‚Üí + ENTR√âE", "IJKL + U", "8456 + 7"};

            for (int i = 0; i < playerCount; i++) {
                content.append(emojis[i]).append(" ").append(playerNames[i])
                        .append(" (").append(controls[i]).append(")\n");
            }

            content.append("\nüéØ Capturez tous les drapeaux pour gagner !");
            content.append("\nüíÄ Les √©limin√©s peuvent encore bombarder !");

            confirmAlert.setContentText(content.toString());

            Optional<ButtonType> confirmResult = confirmAlert.showAndWait();
            if (confirmResult.isPresent() && confirmResult.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startCTFGame(playerNames);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur CTF", "Erreur lors du lancement CTF: " + e.getMessage());
        }
    }

    /**
     * Obtient les noms des joueurs pour CTF
     */
    private String[] getCTFPlayerNames(int playerCount) {
        String[] names = new String[playerCount];
        String[] defaultNames = {"Strat√®ge", "Tacticien", "Commandant", "G√©n√©ral"};
        String[] descriptions = {
                "üî¥ Joueur 1 (ZQSD + A)",
                "üîµ Joueur 2 (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)",
                "üü° Joueur 3 (IJKL + U)",
                "üü¢ Joueur 4 (8456 + 7)"
        };

        for (int i = 0; i < playerCount; i++) {
            TextInputDialog dialog = new TextInputDialog(defaultNames[i]);
            dialog.setTitle("CTF - Joueur " + (i + 1));
            dialog.setHeaderText(descriptions[i]);
            dialog.setContentText("Nom du strat√®ge:");

            Optional<String> result = dialog.showAndWait();
            if (!result.isPresent()) {
                return null; // Annul√©
            }

            String name = result.get().trim();
            if (name.isEmpty()) {
                showError("Nom invalide", "Le nom ne peut pas √™tre vide !");
                i--; // Recommencer ce joueur
                continue;
            }

            if (name.length() > 15) {
                showError("Nom trop long", "Maximum 15 caract√®res !");
                i--; // Recommencer ce joueur
                continue;
            }

            names[i] = name;
        }

        // V√©rifier l'unicit√© des noms
        for (int i = 0; i < playerCount; i++) {
            for (int j = i + 1; j < playerCount; j++) {
                if (names[i].equals(names[j])) {
                    showError("Noms identiques", "Tous les joueurs doivent avoir des noms diff√©rents !");
                    return getCTFPlayerNames(playerCount); // Recommencer
                }
            }
        }

        return names;
    }

    /**
     * Lance une partie 4 joueurs
     */
    private void start4PlayerGame() {
        try {
            // Demander les noms des 4 joueurs
            String[] playerNames = get4PlayerNames();
            if (playerNames == null) return; // Annul√©

            // Confirmer le lancement
            Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
            confirmAlert.setTitle("Bataille Royale 4 Joueurs");
            confirmAlert.setHeaderText("‚öîÔ∏è PR√äT POUR LA BATAILLE ? ‚öîÔ∏è");
            confirmAlert.setContentText("Joueurs:\n" +
                    "üî¥ " + playerNames[0] + " (ZQSD + A)\n" +
                    "üîµ " + playerNames[1] + " (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)\n" +
                    "üü° " + playerNames[2] + " (IJKL + U)\n" +
                    "üü¢ " + playerNames[3] + " (8456 + 7)\n\n" +
                    "Dernier survivant remporte tout !");

            Optional<ButtonType> result = confirmAlert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                if (bombermanApp != null) {
                    bombermanApp.startFourPlayerGame(playerNames);
                } else {
                    showError("Erreur", "R√©f√©rence vers l'application principale non trouv√©e");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Erreur lors du lancement du jeu 4 joueurs: " + e.getMessage());
        }
    }

    private String[] get4PlayerNames() {
        String[] names = new String[4];
        String[] defaultNames = {"Alex", "Blake", "Charlie", "Dana"};
        String[] descriptions = {
                "üî¥ Joueur 1 (ZQSD + A)",
                "üîµ Joueur 2 (‚Üë‚Üì‚Üê‚Üí + ENTR√âE)",
                "üü° Joueur 3 (IJKL + U)",
                "üü¢ Joueur 4 (8456 + 7)"
        };

        for (int i = 0; i < 4; i++) {
            TextInputDialog dialog = new TextInputDialog(defaultNames[i]);
            dialog.setTitle("Super Bomberman - Joueur " + (i + 1));
            dialog.setHeaderText(descriptions[i]);
            dialog.setContentText("Nom:");

            Optional<String> result = dialog.showAndWait();
            if (!result.isPresent()) {
                return null; // Annul√©
            }

            String name = result.get().trim();
            if (name.isEmpty()) {
                showError("Nom invalide", "Le nom ne peut pas √™tre vide !");
                i--; // Recommencer ce joueur
                continue;
            }

            if (name.length() > 15) {
                showError("Nom trop long", "Le nom ne peut pas d√©passer 15 caract√®res !");
                i--; // Recommencer ce joueur
                continue;
            }

            names[i] = name;
        }

        // V√©rifier que tous les noms sont diff√©rents
        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 4; j++) {
                if (names[i].equals(names[j])) {
                    showError("Noms identiques", "Tous les joueurs doivent avoir des noms diff√©rents !");
                    return get4PlayerNames(); // Recommencer compl√®tement
                }
            }
        }

        return names;
    }

    private String getBotDescription(int difficulty) {
        switch (difficulty) {
            case 1:
                return "üü¢ IA D√©butante:\n" +
                        "‚Ä¢ Mouvements al√©atoires\n" +
                        "‚Ä¢ Bombes occasionnelles\n" +
                        "‚Ä¢ R√©actions lentes";

            case 2:
                return "üü° IA √âquilibr√©e:\n" +
                        "‚Ä¢ Strat√©gie de base\n" +
                        "‚Ä¢ Fuit les dangers\n" +
                        "‚Ä¢ Cible les briques";

            case 3:
                return "üî¥ IA Redoutable:\n" +
                        "‚Ä¢ Strat√©gie avanc√©e\n" +
                        "‚Ä¢ Vous traque activement\n" +
                        "‚Ä¢ R√©actions rapides\n" +
                        "‚Ä¢ Bombes tactiques";

            default:
                return "IA de niveau moyen";
        }
    }

    // ============================================================================
    // ‚úÖ M√âTHODES EXISTANTES CONSERV√âES
    // ============================================================================

    @FXML
    private void onProfile() {
        try {
            // ‚úÖ MODIFICATION: Demander le nom du joueur d'abord
            TextInputDialog dialog = new TextInputDialog("Joueur1");
            dialog.setTitle("Profil");
            dialog.setHeaderText("Gestion de profil");
            dialog.setContentText("Entrez votre nom de joueur:");

            Optional<String> result = dialog.showAndWait();
            if (result.isPresent() && !result.get().trim().isEmpty()) {
                String playerName = result.get().trim();

                // Charger et afficher les statistiques
                openProfileStats(playerName);
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir le profil");
        }
    }

    // ‚úÖ AJOUT DES M√âTHODES MANQUANTES POUR LES PROFILS
    private void openProfileStats(String playerName) {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("/fr/univ/bomberman/fxml/profile/stats.fxml"));
            Parent root = loader.load();

            ProfileStatsController controller = loader.getController();
            controller.loadProfile(playerName);

            Stage stage = new Stage();
            stage.setTitle("Profil - " + playerName);
            stage.setScene(new Scene(root, 500, 500));
            stage.setResizable(true);
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir les statistiques");
        }
    }

    /**
     * ‚úÖ M√âTHODE CORRIG√âE: S√©lection de profil existant
     */
    @FXML
    private void onSelectProfile() {
        try {
            ProfileManager profileManager = ProfileManager.getInstance();
            List<String> profiles = profileManager.listProfiles();

            if (profiles.isEmpty()) {
                showInfo("Aucun profil", "Aucun profil trouv√©. Cr√©ez-en un nouveau.");
                onProfile(); // Rediriger vers cr√©ation de profil
                return;
            }

            ChoiceDialog<String> dialog = new ChoiceDialog<>(profiles.get(0), profiles);
            dialog.setTitle("S√©lection de profil");
            dialog.setHeaderText("Choisissez votre profil");
            dialog.setContentText("Profil:");

            Optional<String> result = dialog.showAndWait();
            if (result.isPresent()) {
                openProfileStats(result.get());
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de charger la liste des profils");
        }
    }

    /**
     * ‚úÖ M√âTHODE CORRIG√âE: Statistiques globales
     */
    @FXML
    private void onGlobalStats() {
        try {
            ProfileManager profileManager = ProfileManager.getInstance();
            ProfileManager.ProfileStats globalStats = profileManager.getGlobalStats();

            StringBuilder message = new StringBuilder();
            message.append("üìä STATISTIQUES GLOBALES\n\n");
            message.append("üë• Profils cr√©√©s: ").append(globalStats.getTotalProfiles()).append("\n");
            message.append("üéÆ Parties totales: ").append(globalStats.getTotalGamesPlayed()).append("\n");
            message.append("üèÜ Victoires totales: ").append(globalStats.getTotalWins()).append("\n");
            message.append("üìà Taux de victoire global: ").append(String.format("%.1f%%", globalStats.getGlobalWinRate())).append("\n");
            message.append("‚è±Ô∏è Temps de jeu total: ").append(globalStats.getFormattedTotalPlayTime()).append("\n");
            message.append("üî• Joueur le plus actif: ").append(globalStats.getMostActivePlayer())
                    .append(" (").append(globalStats.getMostGamesPlayed()).append(" parties)");

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Statistiques Globales");
            alert.setHeaderText("R√©capitulatif de tous les profils");
            alert.setContentText(message.toString());
            alert.getDialogPane().setPrefWidth(400);
            alert.showAndWait();

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible de charger les statistiques globales");
        }
    }

    @FXML
    private void onQuit(ActionEvent event) {
        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
        confirmAlert.setTitle("Quitter");
        confirmAlert.setHeaderText("Confirmation");
        confirmAlert.setContentText("Tu vas o√π comme √ßa ? " + "\n" + " Reste ici");

        Optional<ButtonType> result = confirmAlert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.close();
        }
    }

    @FXML
    private void onPlayerNames(ActionEvent event) {
        try {
            TextInputDialog dialog1 = new TextInputDialog(player1Name);
            dialog1.setTitle("Super Bomberman - Nom du Joueur 1");
            dialog1.setHeaderText("üîµ Joueur 1 (ZQSD + ESPACE)");
            dialog1.setContentText("Entrez le nom du joueur 1:");

            Optional<String> result1 = dialog1.showAndWait();
            if (result1.isPresent() && !result1.get().trim().isEmpty()) {
                String newName1 = result1.get().trim();

                if (newName1.length() > 15) {
                    showError("Nom trop long", "Le nom ne peut pas d√©passer 15 caract√®res.");
                    return;
                }

                TextInputDialog dialog2 = new TextInputDialog(player2Name);
                dialog2.setTitle("Super Bomberman - Nom du Joueur 2");
                dialog2.setHeaderText("üü¢ Joueur 2 (Fl√®ches + ENTR√âE)");
                dialog2.setContentText("Entrez le nom du joueur 2:");

                Optional<String> result2 = dialog2.showAndWait();
                if (result2.isPresent() && !result2.get().trim().isEmpty()) {
                    String newName2 = result2.get().trim();

                    if (newName2.length() > 15) {
                        showError("Nom trop long", "Le nom ne peut pas d√©passer 15 caract√®res.");
                        return;
                    }

                    if (newName1.equals(newName2)) {
                        showError("Noms identiques", "Les deux joueurs ne peuvent pas avoir le m√™me nom.");
                        return;
                    }

                    player1Name = newName1;
                    player2Name = newName2;

                    Alert confirmAlert = new Alert(Alert.AlertType.INFORMATION);
                    confirmAlert.setTitle("Noms mis √† jour");
                    confirmAlert.setHeaderText("‚úÖ Noms des joueurs modifi√©s");
                    confirmAlert.setContentText("üîµ Joueur 1: " + player1Name + "\n" +
                            "üü¢ Joueur 2: " + player2Name + "\n\n" +
                            "Les nouveaux noms seront utilis√©s lors de la prochaine partie.");
                    confirmAlert.showAndWait();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            showError("Erreur", "Impossible d'ouvrir la configuration des noms: " + e.getMessage());
        }
    }

    // ============================================================================
    // M√âTHODES UTILITAIRES
    // ============================================================================

    private void showError(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // ‚úÖ M√âTHODE MANQUANTE AJOUT√âE
    private void showInfo(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public String getPlayer1Name() {
        return player1Name;
    }

    public String getPlayer2Name() {
        return player2Name;
    }
}